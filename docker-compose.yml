volumes:
  docker_lab_pgdata:
  models:
  data:
  ollama_data:

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: rag_db
    ports:
      - "55332:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      TZ: Asia/Tokyo
    restart: always
    healthcheck:
      test:
        ["CMD-SHELL", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -l || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - docker_lab_pgdata:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf # JST用設定ファイルをマウント

  ollama:
    # 自作ビルドした最新版Ollamaイメージを使用
    image: ollama-custom:latest
    build: ./ollama-custom
    container_name: rag_ollama
    ports:
      - "11435:11434"
    environment:
      - OLLAMA_NUM_THREADS=2
      - OLLAMA_HOST=0.0.0.0
      - TZ=Asia/Tokyo # JST化
    command: serve
    pull_policy: always
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 60s  # ← ログ頻度を下げるため60秒に変更
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        limits:
          cpus: "1.0"

  frontend:
    build: ./frontend
    container_name: rag_frontend
    ports:
      - "8501:8501"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - TZ=Asia/Tokyo
    depends_on:
      - db
      - ollama
      - backend
    restart: always
    volumes:
      - ./frontend:/app
      - ./.env:/app/.env  # .envファイルをマウント
      - models:/app/models  # モデルの永続化

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # ビルド時の引数を設定
      args:
        - PYTHONUNBUFFERED=1
        - PIP_CACHE_DIR=/root/.cache/pip
    image: rag_backend_debug
    container_name: rag_backend
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TRANSFORMERS_CACHE=/app/.cache/huggingface/hub
      - HF_HOME=/app/.cache/huggingface
      - TORCH_HOME=/app/.cache/torch
      - TZ=Asia/Tokyo
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: always
    volumes:
      # モデルキャッシュを永続化
      - models:/app/.cache
      # アプリケーションコードのホットリロード用（開発時のみ）
      - ./backend/app:/app/app
      - ./backend/models.yaml:/app/models.yaml
      - ./backend/strategies.yaml:/app/strategies.yaml
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
